ifelse(Vessel == "Tasha Marie", "Dale Fitzgerald",
ifelse(Vessel == "Lady Janice", "Lee Surette",
ifelse(Vessel == "Morning Star", "Nicholas D'entremont",
NA)))))) %>%
mutate(Ground = ifelse(between(Lat, 45.02, 45.4) & between(Lon, -65.5, -64.5), "Scots Bay",
ifelse(between(Lat, 43.15, 43.7) & between(Lon, -66.75, -66.05), "German Bank", 'Other')))
# Bind Data and add Julian/Annual Tags
TaggingEvents = full_join(Tagging, Tags)
TaggingEvents = TaggingEvents %>%
mutate(Julian = yday(Date)) %>%
mutate(Year = as.numeric(substr(Date, 1, 4))) %>%
dplyr::select(-Tag_Annual)
Tag_Annual = TaggingEvents %>%
group_by(Tagger) %>%
mutate(count = n_distinct(Year)) %>%
summarize(n=n(), count2 = mean(count)) %>%
mutate(Tag_Annual = n/count2) %>%
dplyr::select(-n, -count2)
TaggingEvents = left_join(TaggingEvents, Tag_Annual, by = "Tagger")
# Save TaggingEvents.csv
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
TaggingEvents = TaggingEvents %>% mutate(Ground = ifelse(between(Lat, 45.02, 45.4) & between(Lon, -65.5, -64.5), "Scots Bay",
ifelse(between(Lat, 43.15, 43.7) & between(Lon, -66.75, -66.05), "German Bank", 'Other')))
View(TaggingEvents)
# Save TaggingEvents.csv
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
4+3*25
4+3*25
library (data.table)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
library (sunriset)
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
#install.packages("suncalc")
update.packages(ask = FALSE)
install.packages("suncalc")
#update.packages(ask = FALSE)
library (data.table)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
library (sunriset)
# remove everything in the workspace
rm(list = ls())
install.packages("suncalc")
install.packages("suncalc")
library (data.table)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
library (sunriset)
# remove everything in the workspace
rm(list = ls())
# remove everything in the workspace
rm(list = ls())
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
# remove everything in the workspace
rm(list = ls())
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
install.packages("suncalc")
library (data.table)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
library (sunriset)
mean(1:5)
?mean
??"regression model"
?mean
??"regression model"
a_vector <- c(1,3,6,10)
apropos ("vector")
browseVignettes()
sd(0:100)
plotmath()
demo(plot math)
demo("plot math")
?demo
library(knitr)
demo(plot math)
demo(plot math)
demo(plot math)
??demo(plot math)
?plot math
demo(plotmath)
1:5 + 6:10
c(1,3,6,10,15)+c(0,1,3,6,10)
sum(1:5)
View(oldpar)
x <- 1:5
y <- 6:10
x+2*y-3
## Global options
knitr::opts_knit$set(root.dir = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/"))
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
rm(list = ls())
#Change these options
surv = "GB"
surv2 = "German Bank"
year = "2023"
surv.no = "4"
hightide = "2023-09-20 21:41:00" #for Scots Bay only
#Import all packages, CTD data, and land data
#Packages
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Main Data"))
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(DT)
#Survey Data
Survey = read_csv("Survey Data.csv") #Survey Data
Survey$Year = as.factor(Survey$Year)
Survey$Ground = as.factor(Survey$Ground)
#Tagging Data
Tag = read_csv("TaggingEvents.csv") #Tagging Data
polysT = read_csv("timGrounds.csv") #Coloured ground maps
Tag$Year = as.factor(Tag$Year)
Tag$Vessel = as.factor(Tag$Vessel)
Tag$Survey = as.factor(Tag$Survey)
Tag$Tagger = as.factor(Tag$Tagger)
#CTD Data
SST = read_csv("CTD SST.csv") #SST
polysT = read_csv("timGrounds.csv") #coloured ground maps
CTD = read_csv("CTD Full.csv") #All Data
atDepth = read_csv("CTD 30m.csv") #At 30m Depth > This one contains all Stratified Temp + Salinity data as well
SST$Year <- as.factor(SST$Year)
SST$Month <- as.factor(SST$Month)
atDepth$Year <- as.factor(atDepth$Year)
atDepth$Month <- as.factor(atDepth$Month)
CTD$Year <- as.factor(CTD$Year)
CTD$Month <- as.factor(CTD$Month)
CTD$Survey <- as.factor(CTD$Survey)
CTD <- CTD %>%
mutate(Julian_factor = Julian)
CTD$Julian_factor <- as.factor(CTD$Julian_factor)
CTD2=CTD
#SSB Data
SSB = read_csv("SSB Estimates.csv")
SSB$Year <- as.factor(SSB$Year)
SSB$Survey_Number <- as.factor(SSB$Survey_Number)
SSB$Ground <- as.factor(SSB$Ground)
#Larval Data
Larval = read_csv("Full Larval.csv")
Larval$Year <- as.factor(Larval$Year)
Larval$category <- as.factor(Larval$category)
Larval$Survey.No <- as.factor(Larval$Survey.No)
#Land Data
can<-getData('GADM', country="CAN", level=1)
us = getData('GADM', country = "USA", level = 1)
can1 = rbind(can,us)
NBNS <- can1[can1@data$NAME_1%in%c("New Brunswick","Nova Scotia","Prince Edward Island","Newfoundland and Labrador","QuÃ©bec", "Maine"),]
# Proper coordinates for German Bank
GBMap <- as(extent(-66.5, -65.5, 43, 44), "SpatialPolygons")
proj4string(GBMap) <- CRS(proj4string(NBNS))
GBout <- gIntersection(NBNS, GBMap, byid=TRUE)
# Proper coordinates for Scots Bay
SBMap <- as(extent(-65.5, -64.5, 45, 45.5), "SpatialPolygons")
proj4string(SBMap) <- CRS(proj4string(NBNS))
SBout <- gIntersection(NBNS, SBMap, byid=TRUE)
?Trig
?arctan
arctan(1:1000)
atan(1:1000)
x <- 1:1000
atan(x) <- y
y <- atan(x)
z <- atan(y)
?arctan
#Exercise 2, questions pg 45, answers pg 363
#2-1
atan(1/1:1000) #reciprocal is 1/x
y <- atan(1/1:1000)
x <- 1:1000
z <- tan(1/y)
z <- 1/tan(Y)
z <- 1/tan(y)
#2-2
x == z, identical
#2-2
x == z identical
#2-2
x == z
?identical
identical (x, z)
all.equal(x, z)
?all.equal
all.equal(x,z, tolerance = 0)
#2-3
true_and_missing <- c(TRUE, NA)
false_and_missing <- c(FALSE, NA)
mixed <- c(TRUE, FALSE, NA)
any(true_and_missing)
any(false_and_missing)
any(mixed)
all(true_and_missing)
all(false_and_missing)
all(mixed)
#2-3
true_and_missing <- c(NA, TRUE, NA)
false_and_missing <- c(FALSE, FALSE, NA)
mixed <- c(TRUE, FALSE, NA)
any(true_and_missing)
any(false_and_missing)
any(mixed)
all(true_and_missing)
all(false_and_missing)
all(mixed)
library(installr)
updateR()
updateR()
###remove everything in environment
rm(list = ls())
R.Version()
install.packages("oce")
library(oce)
library(gsw)
year= substr(Sys.Date(),1,4)
knitr::opts_knit$set(root.dir = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/"))
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, fig.align='center')
library(oce)
library(data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
#library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
#library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2003-07-31"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
SunsetStart <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2003-08-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
SunsetStart <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2003-08-24"
### Code below ###
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
SunsetStart <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2003-09-06"
### Code below ###
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2003-07-31"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
date = "2003-08-10"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
date = "2003-08-24"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
library(oce)
#Packages
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Main Data/"))
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
#library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
#library(rgeos)
library(sf)
library(terra)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(DT)
library(dygraphs)
library(leaflet)
library(rmapshaper)
library(plotly)
library(mapproj)
library(oce) #new CTD Data package
data("sealevel")
View(sealevel)
t <- sealevel("time")
t<-sealevel[["time"]]
eta <- sealevel[["elevation"]]
m <- tidem(sealevel)
etaDetided <- eta - predict(m)
plot(ctd)
plot(ctd)
plot(CTD)
slot(ctd)
