CTD <- CTD %>% dplyr::select(-Pressure, -Conductivity, -Specific_conductance, -Sound_velocity, -Density, -plankton_ID)
CTD$Date = ymd(CTD$Date)
CTD <- CTD %>% mutate(Julian = yday(Date)) #add Julian day
CTD <- CTD %>% rename(Ground = ground, ID = id)
Bio <- read_csv("G:/My Drive/HSC Working/R Markdown/Source Data/Biomass.csv")
CTD <- left_join(CTD, Bio, by = "Date")
CTD <- CTD %>% mutate(Month = as.numeric(substr(Date, 6, 7))) %>% dplyr::select(-Location) #may need to remove other columns
CTD$Month <- as.factor(CTD$Month)
CTD$Year <- as.factor(CTD$Year)
#imports daily ECCC historical data for GB=Yarmouth=50133, SB=Greenwood=6354
ECCC = weather_dl(station_ids = c(50133, 6354), start = "2017-01-01", interval = "day")
ECCC = ECCC %>%
dplyr::select(station_name, date, mean_temp, total_precip, total_snow, total_rain, spd_max_gust,
min_temp, max_temp, heat_deg_days, cool_deg_days) %>%
rename(Date = date) %>%
mutate(Ground = ifelse(station_name == "GREENWOOD A", "Scots Bay", "German Bank"))
#Combine with ECCC data, need to make Scots Bay = Greenwod, German Bank = Yarmouth
CTD = left_join(CTD, ECCC, by = c("Date", "Ground"))
#Cast in or out of box factor
CTD = CTD %>%
mutate(In_Box = ifelse(Ground == "Scots Bay" & between(Lat, 45.03, 45.08) & between(Lon, -65.3, -65.1), "1",
ifelse(Ground == "German Bank" & between(Lat, 43.50, 43.60) & between(Lon, -66.4, -66.3), "1", "0")))
CTD$In_Box = as.factor(CTD$In_Box)
#SST
SST = CTD %>%
filter(between(Depth, 0, 5)) %>%
filter(grepl('German Bank|Scots Bay', Ground)) %>%
group_by(Ground, Date, Year, Julian, Month, Survey, In_Box) %>%
summarize(TempSD = sd(Temperature),
Temperature = mean(Temperature),
Biomass = mean(Biomass),
logTemp = log(Temperature),
Lat = mean(Lat),
Lon = mean(Lon),
logBiomass = log(Biomass),
SalinitySD = sd(Salinity),
Salinity = mean(Salinity),
mean_temp = mean(mean_temp),
total_precip = mean(total_precip),
total_snow = mean(total_precip),
total_rain = mean(total_rain),
spd_max_gust = max(spd_max_gust),
min_temp = min(min_temp),
max_temp = max(max_temp),
heat_deg_days = mean(heat_deg_days),
cool_deg_days = mean(cool_deg_days))
SST = SST %>%
group_by(Year, Month, Ground) %>%
mutate(Count = length(Temperature))
#At-depth
CTD30 = CTD %>%
filter(between(Depth, 28, 32)) %>%
filter(grepl('German Bank|Scots Bay', Ground)) %>%
group_by(Ground, Date, Year, Julian, Month, Survey, In_Box) %>%
summarize(TempSD = sd(Temperature),
Temperature = mean(Temperature),
Biomass = mean(Biomass),
logTemp = log(Temperature),
Lat = mean(Lat),
Lon = mean(Lon),
logBiomass = log(Biomass),
SalinitySD = sd(Salinity),
Salinity = mean(Salinity),
mean_temp = mean(mean_temp),
total_precip = mean(total_precip),
total_snow = mean(total_precip),
total_rain = mean(total_rain),
spd_max_gust = max(spd_max_gust),
min_temp = min(min_temp),
max_temp = max(max_temp),
heat_deg_days = mean(heat_deg_days),
cool_deg_days = mean(cool_deg_days))
CTD30 = CTD30 %>%
group_by(Year, Month, Ground) %>%
mutate(Count = length(Temperature))
#Adding Stratification
#Take SST temps and salinity and add it to 30m dataframe (30m will always have less), mutate stratified = 30m-1m
SSTTemp = SST %>% ungroup() %>% dplyr::select(Date, Temperature, Salinity)
Strat = left_join(CTD30, SSTTemp, by = "Date")
Strat = Strat %>% rename(Temperature = Temperature.x, SST = Temperature.y, Salinity = Salinity.x, SurfaceSalinity = Salinity.y)
Strat = Strat %>% mutate(StratTemp = SST-Temperature) %>% mutate(StratSalt = Salinity-SurfaceSalinity)
Strat = Strat %>%
group_by(Ground, Date, Year, Julian, Month, Survey, In_Box) %>%
summarize(TempSD = sd(Temperature),
Temperature = mean(Temperature),
Biomass = mean(Biomass),
logTemp = log(Temperature),
Lat = mean(Lat),
Lon = mean(Lon),
logBiomass = log(Biomass),
SalinitySD = sd(Salinity),
Salinity = mean(Salinity),
mean_temp = mean(mean_temp),
total_precip = mean(total_precip),
total_snow = mean(total_precip),
total_rain = mean(total_rain),
spd_max_gust = max(spd_max_gust),
min_temp = min(min_temp),
max_temp = max(max_temp),
heat_deg_days = mean(heat_deg_days),
cool_deg_days = mean(cool_deg_days),
SST = mean(SST),
SurfaceSalinity = mean(SurfaceSalinity),
StratTemp = mean(StratTemp),
StratSalt = mean(StratSalt))
CTD30 = Strat
CTD %>% write_csv("G:/My Drive/HSC Working/R Markdown/Main Data/CTD Full.csv")
CTD30 %>% write_csv("G:/My Drive/HSC Working/R Markdown/Main Data/CTD 30m.csv")
SST %>% write_csv("G:/My Drive/HSC Working/R Markdown/Main Data/CTD SST.csv")
## Global options
year= "2022" #Change global/current year here
knitr::opts_knit$set(root.dir = 'G:/My Drive/HSC Working/R Markdown/HTML Markdown/')
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
#Import all packages, CTD data, and land data
#Packages
setwd("G:/My Drive/HSC Working/R Markdown/Main Data/")
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
#Tagging Data
Tag = read_csv("Tagging Data.csv") #Tagging Data
polysT = read_csv("timGrounds.csv") #Coloured ground maps
Tag$Year = as.factor(Tag$Year)
Tag$Vessel = as.factor(Tag$Vessel)
Tag$Survey = as.factor(Tag$Survey)
Tag$Tagger = as.factor(Tag$Tagger)
#CTD Data
SST = read_csv("CTD SST.csv") #SST
polysT = read_csv("timGrounds.csv") #coloured ground maps
CTD = read_csv("CTD Full.csv") #All Data
atDepth = read_csv("CTD 30m.csv") #At 30m Depth > This one contains all Stratified Temp + Salinity data as well
SST$Year <- as.factor(SST$Year)
SST$Month <- as.factor(SST$Month)
atDepth$Year <- as.factor(atDepth$Year)
atDepth$Month <- as.factor(atDepth$Month)
CTD$Year <- as.factor(CTD$Year)
CTD$Month <- as.factor(CTD$Month)
CTD$Survey <- as.factor(CTD$Survey)
CTD <- CTD %>%
mutate(Julian_factor = Julian)
CTD$Julian_factor <- as.factor(CTD$Julian_factor)
#SSB Data
SSB = read_csv("SSB Estimates.csv")
SSB$Year <- as.factor(SSB$Year)
SSB$Survey_Number <- as.factor(SSB$Survey_Number)
SSB$Ground <- as.factor(SSB$Ground)
#Larval Data
Larval = read_csv("Full Larval.csv")
Larval$Year <- as.factor(Larval$Year)
Larval$category <- as.factor(Larval$category)
Larval$surv.No <- as.factor(Larval$surv.No)
#Land Data
can<-getData('GADM', country="CAN", level=1)
us = getData('GADM', country = "USA", level = 1)
can1 = rbind(can,us)
NBNS <- can1[can1@data$NAME_1%in%c("New Brunswick","Nova Scotia","Prince Edward Island","Newfoundland and Labrador","QuÃ©bec", "Maine"),]
#Import All Boxes
setwd("G:/My Drive/HSC Working/R Markdown/Box Coordinates/")
boxes = read.csv("surveyBoxes.csv")
# Scots Bay plankton and CTD box
SBplankton=boxes[which(boxes$Box == "SBPlanktonBox"), ]
SBCTD=boxes[which(boxes$Box == "SBocean"), ]
# Scots Bay
SUA = read.csv("polygon_SBEastern.csv")
polyEastern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SBNorthern.csv")
polyNorthern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SB.csv")
polySB_main = as.PolySet(SUA, projection="LL")
#German Bank CTD box
GBCTD=boxes[which(boxes$Box == "GBocean"), ]
# German Bank
SUA = read.csv("polygon_GB.csv")
polyGB = as.PolySet(SUA, projection="LL")
# Seal Island
SUA = read.csv("polygon_SI.csv")
polySI = as.PolySet(SUA, projection="LL")
#Reset spatial extent back to full view
CP <- as(extent(-69, -63, 42, 45.5), "SpatialPolygons")
proj4string(CP) <- CRS(proj4string(NBNS))
out <- gIntersection(NBNS, CP, byid=TRUE)
ggplot(data = subset(Tag, Lon < -64), aes(x=Lon, y=Lat)) +
geom_polygon(data=polysT,aes(x=X, y=Y, group=Box, fill = Box), colour = "black") +
geom_polygon(data=out,aes(x=long, y=lat, group=group),fill='burlywood4',col='black') +
geom_point(pch=21, size = 2, fill = "White") +
ggtitle("Tagging Locations") +
labs(x=NULL, y=NULL) +
coord_map() +
theme(panel.background = element_rect(fill = "grey68"))
ggplot(data = subset(Tag, Lon < -64.1), aes(x=Lon, y=Lat)) +
geom_polygon(data=polysT,aes(x=X, y=Y, group=Box, fill = Box), colour = "black") +
geom_polygon(data=out,aes(x=long, y=lat, group=group),fill='burlywood4',col='black') +
geom_point(pch=21, size = 2, fill = "White") +
ggtitle("Tagging Locations") +
labs(x=NULL, y=NULL) +
coord_map() +
theme(panel.background = element_rect(fill = "grey68"))
Vessel_Speed = Speed %>%
group_by(Vessel) %>%
summarize(AvgSpeed = mean(Speed))
Vessel_Speed = Vessel_Speed %>%
summarize(AvgSpeed = mean(AvgSpeed))
a=ifelse(Vessel_Speed$AvgSpeed > 8, paste0("Average vessel speed was ", round(Vessel_Speed$AvgSpeed, digits=2), ". This is above the 8 knot requirement; vessels are urged to slow down to prevent backscatter noise from interfering with the acoustic data."), paste("The vessels performed well and the average vessel speed was ", round(Vessel_Speed$AvgSpeed, digits=2), " which is below the requirements of 8 knots."))
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
#calculate time/speed
Perform<-Perform %>% mutate(Start=as.POSIXct(Date.Time.Start, origin = "1970-01-01")) %>%
mutate(End=as.POSIXct(Date.Time.End, origin = "1970-01-01")) %>%
mutate(Duration = as.numeric(End-Start)*60) %>%
mutate(Speed = (Distance*1000)/(Duration))
Perform<-Perform %>% mutate(Speed = Speed*1.94384) #convert from m/s to knots
Perform<-Perform %>% mutate(Year = as.numeric(substr(Start, 1, 4)))
Perform<-Perform %>% mutate(Date = date(Start))
#summarize speed by Transect 1 + 2 (remove any box runners)
Speed<-Perform %>%
dplyr::group_by(Vessel, Transect.No.) %>%
dplyr::summarize(Speed = mean(Speed, na.rm = TRUE)) %>%
filter(!Speed == "NaN") %>%
mutate(Transect = as.factor(Transect.No.))
#group by survey + vessel + type, summarize distance
Distance<-Perform %>%
dplyr::group_by(Vessel, Type) %>%
dplyr::summarize(Distance = sum(Distance)) %>%
spread(Type, Distance, fill = 0) %>%
transmute(Vessel, Difference = Actual-Plan)
Speed %>% write_csv("Speed.csv")
Distance %>% write_csv("Distance.csv")
Perform %>% write_csv("Performance Total.csv")
Distance = Distance %>%
filter(Difference < 40)
ggplot(Distance, aes(Vessel, Difference)) + geom_boxplot() +
ylab("Distance cut from Planned Lines (KM)") +
theme_light() +
geom_hline(yintercept=0, linetype="dashed", color="red", size=1)
Vessel_Speed = Speed %>%
group_by(Vessel) %>%
summarize(AvgSpeed = mean(Speed))
ggplot(Vessel_Speed, aes(Vessel, AvgSpeed)) + geom_boxplot() + ylab("Speed (knots)") + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)
ggplot(Speed, aes(Vessel, Speed)) + geom_col(aes(fill = Transect)) + facet_wrap(~Transect) + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)+labs(title="Speed per Transect") + xlab("Vessel") + ylab("Speed (knots)") + coord_cartesian(ylim = c(7, 10))
View(Speed)
View(Distance)
View(Speed)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
View(Perform)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
View(Perform)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
View(Perform)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
#calculate time/speed
Perform<-Perform %>% mutate(Start=as.POSIXct(Date.Time.Start, origin = "1970-01-01")) %>%
mutate(End=as.POSIXct(Date.Time.End, origin = "1970-01-01")) %>%
mutate(Duration = as.numeric(End-Start)*60) %>%
mutate(Speed = (Distance*1000)/(Duration))
Perform<-Perform %>% mutate(Speed = Speed*1.94384) #convert from m/s to knots
Perform<-Perform %>% mutate(Year = as.numeric(substr(Start, 1, 4)))
Perform<-Perform %>% mutate(Date = date(Start))
#summarize speed by Transect 1 + 2 (remove any box runners)
Speed<-Perform %>%
dplyr::group_by(Vessel, Transect.No.) %>%
dplyr::summarize(Speed = mean(Speed, na.rm = TRUE)) %>%
filter(!Speed == "NaN") %>%
mutate(Transect = as.factor(Transect.No.))
#group by survey + vessel + type, summarize distance
Distance<-Perform %>%
dplyr::group_by(Vessel, Type) %>%
dplyr::summarize(Distance = sum(Distance)) %>%
spread(Type, Distance, fill = 0) %>%
transmute(Vessel, Difference = Actual-Plan)
Speed %>% write_csv("Speed.csv")
Distance %>% write_csv("Distance.csv")
Perform %>% write_csv("Performance Total.csv")
Distance = Distance %>%
filter(Difference < 40)
ggplot(Distance, aes(Vessel, Difference)) + geom_boxplot() +
ylab("Distance cut from Planned Lines (KM)") +
theme_light() +
geom_hline(yintercept=0, linetype="dashed", color="red", size=1)
Vessel_Speed = Speed %>%
group_by(Vessel) %>%
summarize(AvgSpeed = mean(Speed))
ggplot(Vessel_Speed, aes(Vessel, AvgSpeed)) + geom_boxplot() + ylab("Speed (knots)") + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)
ggplot(Speed, aes(Vessel, Speed)) + geom_col(aes(fill = Transect)) + facet_wrap(~Transect) + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)+labs(title="Speed per Transect") + xlab("Vessel") + ylab("Speed (knots)") + coord_cartesian(ylim = c(7, 10))
View(Perform)
View(Distance)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB"
surv2="Scots Bay"
year="2022"
surv.no="10"
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
##Performance data import and filtering
setwd(paste0("G:/My Drive/HSC Working/R Markdown/HTML Markdown/Surveys/", year, "/", surv, surv.no))
actual = list.files(pattern = "*tableA.csv") %>% map_df(~read_csv(.))
actual = actual %>% mutate(Type = "Actual")
plan = list.files(pattern = "*plan.csv") %>% map_df(~read_csv(.))
plan = plan %>% mutate(Type = "Plan")
wd = getwd()
Perform = full_join(actual, plan) %>% mutate(Survey = substr(wd, 60,60)) %>% mutate(Location = substr(wd, 58,59))
Perform = Perform %>% rename(End.Lat="End Lat", End.Lon="End Lon", Start.Lat="Start Lat", Start.Lon="Start Lon", Dist..km.="Dist (km)", Date.Time.Start="Date Time Start", Date.Time.End="Date Time End", Transect.No.="Transect No.")
Perform = Perform %>% mutate(Distance = distHaversine(cbind(Start.Lon,Start.Lat), cbind(End.Lon,End.Lat))) %>% mutate(Distance = Distance/1000)
Perform = Perform %>% mutate(Distance = ifelse(is.na(Dist..km.), Distance, Dist..km.))
#calculate time/speed
Perform<-Perform %>% mutate(Start=as.POSIXct(Date.Time.Start, origin = "1970-01-01")) %>%
mutate(End=as.POSIXct(Date.Time.End, origin = "1970-01-01")) %>%
mutate(Duration = as.numeric(End-Start)*60) %>%
mutate(Speed = (Distance*1000)/(Duration))
Perform<-Perform %>% mutate(Speed = Speed*1.94384) #convert from m/s to knots
Perform<-Perform %>% mutate(Year = as.numeric(substr(Start, 1, 4)))
Perform<-Perform %>% mutate(Date = date(Start))
#summarize speed by Transect 1 + 2 (remove any box runners)
Speed<-Perform %>%
dplyr::group_by(Vessel, Transect.No.) %>%
dplyr::summarize(Speed = mean(Speed, na.rm = TRUE)) %>%
filter(!Speed == "NaN") %>%
mutate(Transect = as.factor(Transect.No.))
#group by survey + vessel + type, summarize distance
Distance<-Perform %>%
dplyr::group_by(Vessel, Type) %>%
dplyr::summarize(Distance = sum(Distance)) %>%
spread(Type, Distance, fill = 0) %>%
transmute(Vessel, Difference = Actual-Plan)
Speed %>% write_csv("Speed.csv")
Distance %>% write_csv("Distance.csv")
Perform %>% write_csv("Performance Total.csv")
Distance = Distance %>%
filter(Difference < 40)
ggplot(Distance, aes(Vessel, Difference)) + geom_boxplot() +
ylab("Distance cut from Planned Lines (KM)") +
theme_light() +
geom_hline(yintercept=0, linetype="dashed", color="red", size=1)
Vessel_Speed = Speed %>%
group_by(Vessel) %>%
summarize(AvgSpeed = mean(Speed))
ggplot(Vessel_Speed, aes(Vessel, AvgSpeed)) + geom_boxplot() + ylab("Speed (knots)") + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)
ggplot(Speed, aes(Vessel, Speed)) + geom_col(aes(fill = Transect)) + facet_wrap(~Transect) + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)+labs(title="Speed per Transect") + xlab("Vessel") + ylab("Speed (knots)") + coord_cartesian(ylim = c(7, 10))
ggplot(Speed, aes(Vessel, Speed)) + geom_col(aes(fill = Transect)) + facet_wrap(~Transect) + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)+labs(title="Speed per Transect") + xlab("Vessel") + ylab("Speed (knots)") + coord_cartesian(ylim = c(7, 12))
ggplot(Speed, aes(Vessel, Speed)) + geom_col(aes(fill = Transect)) + facet_wrap(~Transect) + theme_light() + geom_hline(yintercept=8, linetype="dashed", color="red", size=1)+labs(title="Speed per Transect") + xlab("Vessel") + ylab("Speed (knots)") + coord_cartesian(ylim = c(7, 13))
