library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#
##
### Code below ###
##
#
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
#x1 <- (date)
#x2 <- (julian)
#x3 <- (Lat)
#x4 <- (Lon)
#x5 <- (SunsetStartOnly)
#x <- list(date = x1, julian = x2, Lat = x3, Lon = x4, SunStartOnly = x5)
#SunsetStart1 <- as.data.frame(x)
#SunsetTimeCSV = full_join(SunsetStart, x, copy = TRUE)
View(SunsetTimeCSV)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
View(SunsetStart)
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetTimeCSV)
View(SunsetTimeCSV)
View(SunsetStart)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
View(SunsetStart)
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetTimeCSV)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
View(SunsetTimeCSV)
View(SunsetStart)
View(SunsetStart)
View(SunsetTimeCSV)
View(Sunset)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
View(SunsetStart)
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetTimeCSV)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
View(SunsetTimeCSV)
# remove everything in the workspace
rm(list = ls())
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data"))
library(data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data"))
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetStart)
View(Sunset)
sunset$sunsetStart = as.character(sunset$SunsetStart)
Sunset$sunsetStart = as.character(Sunset$SunsetStart)
rlang::last_trace()
View(SunsetStart)
View(Sunset)
View(SunsetStart)
View(Sunset)
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
View(SunsetStart)
View(Sunset)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, as.character(keep = c("sunsetStart")), tz = "America/Halifax")
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = as.character(c("sunsetStart")), tz = "America/Halifax")
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
View(Sunset)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character) stringsAsFactors = FALSE)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
Sunset[] <- data.frame(lapply(SunsetStart, as.character), stringsAsFactors = FALSE)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
Sunset[] <- data.frame(lapply(SunsetStart, as.Date), stringsAsFactors = FALSE)
Sunset[] <- data.frame(lapply(SunsetStart, as.Date), stringsAsFactors = FALSE)
View(SunsetStart)
date = "2023-09-11"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset[] <- data.frame(lapply(SunsetStart, as.Date), stringsAsFactors = FALSE)
Sunset[] <- data.frame(lapply(Sunset, as.Date), stringsAsFactors = FALSE)
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = right_join(Sunset, SunsetStart)
View(SunsetTimeCSV)
#Bind Data
#SunsetTimeCSV = right_join(Sunset, SunsetStart)
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetTimeCSV)
SunsetTimeCSV$sunsetStart = as.character(SunsetTimeCSV$SunsetStartOnly)
SunsetStartOnly <- Sunset$sunsetStart
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-11"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
Sunset <- as.data.frame(Sunset)
View(Sunset)
View(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
View(Sunset)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
View(Sunset)
View(Sunset)
Sunset$date = as.Date(Sunset$date)
View(Sunset)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
View(SunsetTimeCSV)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/surveyFactorsAll_Tracey with SSB data.csv"))
View(Sunset)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="SB" #SB or GB
surv2="Scots Bay" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="9999"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "Y" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
#(SB ONLY) Set main-box vessels
ids = c("C1", "FM", "LM", "LJ", "SL", "MS", "LB")
#Area and TS values
SB1= 661 #SB main area
SB2= 77 #SB north area
SB3= 115 #SB east area
GB1 = 511 #GB main area
GB2 = 299 #Seal Island area
GB3 = NA #Ad-hoc school survey area
##
###
##
#BELOW VALUES SHOULD RARELY CHANGE#
TS1 = -35.5 #TS38
#turnover calculation regression values
GB_y = 0.199392662629964
GB_x_var = 0.528381832773883
GB_days = 31
SB_y = 0.364102758434224
SB_x_var = 0.436969270679439
SB_days = 29
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
##Survey Data import and filtering
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
Plankton = read_csv("PlanktonData.csv")
View(Plankton)
Plankton = Plankton %>%
mutate(Year = year,
Ground = surv,
Survey.No = surv.no,
TowTime = difftime(Time2, Time1, units = "mins"))
Plankton$Year = as.numeric(Plankton$Year)
Plankton$Swell = as.character(Plankton$Swell)
if(Sample == "Y"){Plankton$Sample = "Y"}
if(Sample == "N"){Plankton$Sample = "N"}
#get CTD data from Plankton
SurveyData = read_csv("Plan Data.csv")
View(SurveyData)
SurveyData$StartDate = as.Date(SurveyData$Date, format = "%d/%m/%Y")
if(!is.na(first(Plankton$CTD_ID))){
CTDData = read_csv(paste0(Plankton$CTD_ID, ".csv"))
CTDData = CTDData %>%
dplyr::select(Pressure = "Pressure (Decibar)", Depth = "Depth (Meter)", Temperature = "Temperature (Celsius)",	Conductivity = "Conductivity (MicroSiemens per Centimeter)", Specific_conductance = "Specific conductance (MicroSiemens per Centimeter)",
Salinity = "Salinity (Practical Salinity Scale)", Sound_velocity = "Sound velocity (Meters per Second)", Density = "Density (Kilograms per Cubic Meter)")
CTDData = CTDData %>%
mutate(plankton_ID = paste0(first(Plankton$Set_Number), "/", last(Plankton$Set_Number)),
ground = surv2,
id = first(Plankton$CTD_ID),
Date = first(SurveyData$StartDate),
Lat = first(Plankton$CTD_Lat),
Lon = first(Plankton$CTD_Lon),
Year = first(year),
Survey = first(surv.no))
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data"))
CTDRaw = read_csv("CTD_Raw.csv")
CTDData$Year = as.numeric(CTDData$Year)
CTDData$Survey = as.numeric(CTDData$Survey)
CTDTotal = full_join(CTDRaw, CTDData)
#CTDTotal %>% write_csv("CTD_Raw.csv")
Plankton = Plankton %>%
mutate(AvgTemp = mean(CTDData$Temperature),
AvgSalinity = mean(CTDData$Salinity))
}
if(is.na(first(Plankton$CTD_ID))){
Plankton = Plankton %>%
mutate(AvgTemp = NA,
AvgSalinity = NA)
}
#get Ruskin data
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), skip = 1, sheet = 'Data')
TowData$DateTime = TowData$Time
TowData$DateTime = TowData$DateTime-hours(3)
TowData$Date = substr(TowData$DateTime,1,10)
TowData$Time = substr(TowData$DateTime,12,19)
TowData$Time = hms::as_hms(TowData$Time)
#Filter tow data based on Time1 + Time2
Tow1 = TowData[TowData$Time >= first(Plankton$Time1) & TowData$Time <= first(Plankton$Time2),]
Tow2 = TowData[TowData$Time >= last(Plankton$Time1) & TowData$Time <= last(Plankton$Time2),]
#Calculate average and max tow depths for each
Tow1 = Tow1 %>%
mutate(AvgTowDepth = mean(Depth),
MaxTowDepth = max(Depth),
Tow_No = 1)
Tow2 = Tow2 %>%
mutate(AvgTowDepth = mean(Depth),
MaxTowDepth = max(Depth),
Tow_No = 2)
#ggplot the profiles for each tow
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
Tow1 %>%
ggplot(aes(x = Time, y = Depth)) +
geom_path(linewidth = 1, colour = "blue") +
scale_y_reverse() +
labs(y = "Depth (m)")
ggsave("Tow 1.jpg")
Tow2 %>%
ggplot(aes(x = Time, y = Depth)) +
geom_path(linewidth = 1, colour = "blue") +
scale_y_reverse() +
labs(y = "Depth (m)")
ggsave("Tow 2.jpg")
#combine the avg and max values with plankton sheet
TowTbl1 = tibble_row(Tow_No = 1, AvgTowDepth = first(Tow1$AvgTowDepth), MaxTowDepth = first(Tow1$MaxTowDepth))
TowTbl2 = tibble_row(Tow_No = 2, AvgTowDepth = first(Tow2$AvgTowDepth), MaxTowDepth = first(Tow2$MaxTowDepth))
TowCalcs = full_join(TowTbl1, TowTbl2)
Plankton = full_join(Plankton, TowCalcs, by = "Tow_No")
#convert lat/lon before combining
Plankton$Lon1 = as.numeric(conv_unit(Plankton$Lon1, "deg_dec_min", "dec_deg"))*-1
Plankton$Lon2 = as.numeric(conv_unit(Plankton$Lon2, "deg_dec_min", "dec_deg"))*-1
Plankton$Lat1 = as.numeric(conv_unit(Plankton$Lat1, "deg_dec_min", "dec_deg"))
Plankton$Lat2 = as.numeric(conv_unit(Plankton$Lat2, "deg_dec_min", "dec_deg"))
Plankton = Plankton %>%
rename(id = Set_Number)
PlanData = read_csv((paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Plan Data.csv")))
View(Plankton)
View(PlanData)
View(SurveyData)
PlanData$Survey.No = as.character(PlanData$Survey.No)
SurveyTotal = full_join(Plankton, PlanData)
setwd(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Source Data/"))
Survey = read_csv("planktonsamplingData.csv")
# remove everything in the workspace
rm(list = ls())
surv="SB" #SB or GB
surv2="Scots Bay" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="9999"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "Y" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
#(SB ONLY) Set main-box vessels
ids = c("C1", "FM", "LM", "LJ", "SL", "MS", "LB")
#Area and TS values
SB1= 661 #SB main area
SB2= 77 #SB north area
SB3= 115 #SB east area
GB1 = 511 #GB main area
GB2 = 299 #Seal Island area
GB3 = NA #Ad-hoc school survey area
##
###
##
