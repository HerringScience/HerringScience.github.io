Tag_Num = c(520101:520200) #Can add any tag entries, including breaks/gaps in the sequences
# remove everything in the workspace
rm(list = ls())
library(lubridate)
library(tidyverse)
library(measurements)
# Set all tagging log data here
Tag_Num = c(520101:520200) #Can add any tag entries, including breaks/gaps in the sequences
Date = "2023-10-15" #"YYYY-MM-DD"
Lat = "44 16 11" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "67 00 76"
Vessel = "Sealife II" #As written unless changed in script below: "Lady Melissa", "Sealife II", "Tasha Marie", "Lady Janice", "Morning Star"
Survey = NA #Survey number for Scots Bay or German Bank when tags were applied, otherwise "NA"
CTD = NA #Add the CTD id only if a TAGGER completed a cast (not the cast by the HSC tech)
##
###
### SCRIPT BELOW ###
###
##
# Load TaggingEvents.csv
Tagging <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
Tagging$Date = ymd(Tagging$Date)
# Modify Data
Lon = conv_unit(Lon,"deg_min_sec","dec_deg") #converts the entered longitude from deg_min_sec to decimal degrees
Lon = as.numeric(Lon) #then saves it as a numeric value
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg") #same as above but for latitude
Lat = as.numeric(Lat)
Lon = -1*Lon #convert longitude to negative
Tags = tibble(Tag_Num, Date, Lon, Lat, Vessel, Survey, CTD) #saves all the values into a tibble (a tidyverse dataframe)
Tags$Date = ymd(Tags$Date) #convert the Date to a year-month-day (ymd) format
Tags = Tags %>% #this entire pipeline (%>%) will take the Tags dataframe, and mutate (create or modify) a variable named Tagger
mutate(Tagger = ifelse(Vessel == "Lady Melissa", "Joseph Nickerson", #this is used to link each tagger to their vessel
ifelse(Vessel == "Sealife II", "Annik Doucette", #if the vessel-tagger assignments change it needs to be edited here
ifelse(Vessel == "Tasha Marie", "Dale Fitzgerald",
ifelse(Vessel == "Lady Janice", "Lee Surette",
ifelse(Vessel == "Morning Star", "Nicholas D'entremont",
ifelse(Vessel == "Fundy Monarch", "William Cusack",
ifelse(Vessel == "Canada 100", "William Cusack",
ifelse(Vessel == "Brunswick Provider", "William Cusack",
NA))))))))) %>%
mutate(Ground = ifelse(between(Lat, 45.02, 45.4) & between(Lon, -65.5, -64.5), "Scots Bay", #finally, if lat/lon is between these values it will assign ground as either SB or GB
ifelse(between(Lat, 43.15, 43.7) & between(Lon, -66.75, -66.05), "German Bank", 'Other'))) #if lat/lon is in neither range, ground will be set to Other
# Bind Data and add Julian/Annual Tags
TaggingEvents = full_join(Tagging, Tags) #joins the tagging database with the new data
TaggingEvents = TaggingEvents %>%
mutate(Julian = yday(Date)) %>% #adds the Julian date column (again, through Mutate which makes new columns)
mutate(Year = as.numeric(substr(Date, 1, 4))) %>% #Year is a substring of Date, from the 1st to the 4th value
dplyr::select(-Tag_Annual) #a negative select will drop the Annual Tag count for now, because it is calculated later
Tag_Annual = TaggingEvents %>%
group_by(Tagger) %>% #group_by can by read as "for each", so in this case, for each unique Tagger and each unique Year they tagged in we will calculate their annual tags applied
mutate(count = n_distinct(Year)) %>%
summarize(n=n(), count2 = mean(count)) %>%
mutate(Tag_Annual = n/count2) %>%
dplyr::select(-n, -count2) #used to drop the columns made just to calculate the annual tags
TaggingEvents = left_join(TaggingEvents, Tag_Annual, by = "Tagger") #combine the database + new data with the annual counts all into one frame
# Save TaggingEvents.csv - saves the same file in both Source and Main data which is redundant but necessary because of how other coding is setup
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Main Data/TaggingEvents.csv"))
# Set all tagging log data here
Tag_Num = c(520001:520050) #Can add any tag entries, including breaks/gaps in the sequences
# remove everything in the workspace
rm(list = ls())
library(lubridate)
library(tidyverse)
library(measurements)
# Set all tagging log data here
Tag_Num = c(520001:520050) #Can add any tag entries, including breaks/gaps in the sequences
Date = "2023-10-15" #"YYYY-MM-DD"
Lat = "44 16 11" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "67 00 76"
Vessel = "Sealife II" #As written unless changed in script below: "Lady Melissa", "Sealife II", "Tasha Marie", "Lady Janice", "Morning Star"
Survey = NA #Survey number for Scots Bay or German Bank when tags were applied, otherwise "NA"
CTD = NA #Add the CTD id only if a TAGGER completed a cast (not the cast by the HSC tech)
##
###
### SCRIPT BELOW ###
###
##
# Load TaggingEvents.csv
Tagging <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
Tagging$Date = ymd(Tagging$Date)
# Modify Data
Lon = conv_unit(Lon,"deg_min_sec","dec_deg") #converts the entered longitude from deg_min_sec to decimal degrees
Lon = as.numeric(Lon) #then saves it as a numeric value
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg") #same as above but for latitude
Lat = as.numeric(Lat)
Lon = -1*Lon #convert longitude to negative
Tags = tibble(Tag_Num, Date, Lon, Lat, Vessel, Survey, CTD) #saves all the values into a tibble (a tidyverse dataframe)
Tags$Date = ymd(Tags$Date) #convert the Date to a year-month-day (ymd) format
Tags = Tags %>% #this entire pipeline (%>%) will take the Tags dataframe, and mutate (create or modify) a variable named Tagger
mutate(Tagger = ifelse(Vessel == "Lady Melissa", "Joseph Nickerson", #this is used to link each tagger to their vessel
ifelse(Vessel == "Sealife II", "Annik Doucette", #if the vessel-tagger assignments change it needs to be edited here
ifelse(Vessel == "Tasha Marie", "Dale Fitzgerald",
ifelse(Vessel == "Lady Janice", "Lee Surette",
ifelse(Vessel == "Morning Star", "Nicholas D'entremont",
ifelse(Vessel == "Fundy Monarch", "William Cusack",
ifelse(Vessel == "Canada 100", "William Cusack",
ifelse(Vessel == "Brunswick Provider", "William Cusack",
NA))))))))) %>%
mutate(Ground = ifelse(between(Lat, 45.02, 45.4) & between(Lon, -65.5, -64.5), "Scots Bay", #finally, if lat/lon is between these values it will assign ground as either SB or GB
ifelse(between(Lat, 43.15, 43.7) & between(Lon, -66.75, -66.05), "German Bank", 'Other'))) #if lat/lon is in neither range, ground will be set to Other
# Bind Data and add Julian/Annual Tags
TaggingEvents = full_join(Tagging, Tags) #joins the tagging database with the new data
TaggingEvents = TaggingEvents %>%
mutate(Julian = yday(Date)) %>% #adds the Julian date column (again, through Mutate which makes new columns)
mutate(Year = as.numeric(substr(Date, 1, 4))) %>% #Year is a substring of Date, from the 1st to the 4th value
dplyr::select(-Tag_Annual) #a negative select will drop the Annual Tag count for now, because it is calculated later
Tag_Annual = TaggingEvents %>%
group_by(Tagger) %>% #group_by can by read as "for each", so in this case, for each unique Tagger and each unique Year they tagged in we will calculate their annual tags applied
mutate(count = n_distinct(Year)) %>%
summarize(n=n(), count2 = mean(count)) %>%
mutate(Tag_Annual = n/count2) %>%
dplyr::select(-n, -count2) #used to drop the columns made just to calculate the annual tags
TaggingEvents = left_join(TaggingEvents, Tag_Annual, by = "Tagger") #combine the database + new data with the annual counts all into one frame
# Save TaggingEvents.csv - saves the same file in both Source and Main data which is redundant but necessary because of how other coding is setup
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Source Data/TaggingEvents.csv"))
TaggingEvents %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Main Data/TaggingEvents.csv"))
# remove everything in the workspace
rm(list = ls())
setwd("C:/Users/herri/Desktop/ANOVA")
getwd()
#remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder/ANOVA")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(ggplot2)
library(maps)
library(dplyr)
library(RColorBrewer)
library(AICcmodavg)
library(datasets)
library(multcompView)
#remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder/ANOVA")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
#Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
#Number of Vessels and Survey biomass
VesselsBiomass <- subset(Survey_Factors, select=c("No_of_Vessels", "Julian", "DFO_Estimates", "Survey_Area"))
VesselsBiomass <- na.omit(VesselsBiomass)
VesselsBiomass <- subset(VesselsBiomass, Survey_Area == "SB")
VesselsBiomass$No_of_Vessels <- as.factor(VesselsBiomass$No_of_Vessels)
GraphVessels <- ggplot(VesselsBiomass, aes(No_of_Vessels, DFO_Estimates))+ geom_point() + geom_smooth()
print(GraphVessels)
BoxplotVessels <-boxplot(VesselsBiomass$DFO_Estimates~VesselsBiomass$No_of_Vessels, main = "Biomass recorded per number of Vessels in Survey", xlab="Number of Vessels in Survey", ylab="DFO Estimates")
?full_join
setwd("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(ggplot2)
library(maps)
library(dplyr)
library(RColorBrewer)
library(AICcmodavg)
library(datasets)
library(multcompView)
#remove everything in environment
rm(list = ls())
setwd("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
#Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
#Number of Vessels and Survey biomass
VesselsBiomass <- subset(Survey_Factors, select=c("No_of_Vessels", "Julian", "DFO_Estimates", "Survey_Area"))
VesselsBiomass <- na.omit(VesselsBiomass)
VesselsBiomass <- subset(VesselsBiomass, Survey_Area == "SB")
VesselsBiomass$No_of_Vessels <- as.factor(VesselsBiomass$No_of_Vessels)
GraphVessels <- ggplot(VesselsBiomass, aes(No_of_Vessels, DFO_Estimates))+ geom_point() + geom_smooth()
print(GraphVessels)
BoxplotVessels <-boxplot(VesselsBiomass$DFO_Estimates~VesselsBiomass$No_of_Vessels, main = "Biomass recorded per number of Vessels in Survey", xlab="Number of Vessels in Survey", ylab="DFO Estimates")
#Survey Area, Julian, Survey Time, High Tide Time, DFO_Estimates
SurveyAreaTimeTideBiomass <- subset(Survey_Factors, select=c("Survey_Area","Year", "Julian", "DFO_Estimates", "Survey_Start", "High_Tide", "Tide_Difference", "Tide_Relative" ))
SurveyAreaTimeTideBiomass <- na.omit(SurveyAreaTimeTideBiomass)
ScotsBay_HighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="SB")
#Scot Bay Tide Relative Point Graph
Tide_Relative_Point <- ggplot(ScotsBay_HighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimates)) + geom_point(aes(group= Tide_Difference)) +geom_smooth() + geom_hline(yintercept=mean(ScotsBay_HighTideBiomass$DFO_Estimates))
print(Tide_Relative_Point)
#ANOVAS
two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(one.way)
summary(two.way)
VBANOVA <- aov(DFO_Estimates ~ No_of_Vessels , data = VesselsBiomass)
summary(VBANOVA)
#One Way ANOVA - Julian and Turnover
JTANOVA <- aov(DFO_Estimates ~ Julian, data = ScotsBay_Turnover)
summary(JTANOVA)
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
View(Survey_Data)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
TideDifferent.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
TideDifference.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
VBANOVA <- aov(DFO_Estimates ~ No_of_Vessels , data = VesselsBiomass)
summary(VBANOVA)
#One Way ANOVA - Julian and Turnover
JTANOVA <- aov(DFO_Estimates ~ Julian, data = ScotsBay_Turnover)
summary(JTANOVA)
boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
#Set information here
Lat = "44 16 44" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 26 34"
date = "2023-10-03"
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-10-10"
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
TideDifference.one.way <- aov(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
HighTide.one.way <- aov(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
SurveyTideDifference.two.way <- aov(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
OneWayHighTide <- summary(HighTide.one.way)
View(one.way)
View(OneWayHighTide)
OneWayHighTide[[1]]
TwoWayHighTide <- summary(SurveyHighTide.two.way)
OneWayTideDifference <- summary(SurveyTideDifference.one.way)
TwoWayTideDifference <- summary(SurveyTideDifference.two.way)
OneWayVBANOVA <- summary(VBANOVA)
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
View(Survey_Factors)
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimate"))
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimate"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimate)) +geom_smooth() + geom_point()
print(Point_Graph)
OneWayJB <- aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover)
summary(OneWayJB)
View(OneWayJB)
OneWayJB[["model"]]
OneWayJB
TurkeyHSD(OneWayJB)
?TurkeyHSD
??TurkeyHSD
TukeyHSD(OneWayJB)
str(JulianAndBiomass)
as.factor(JulianAndBiomass$Julian)
str(JulianAndBiomass)
TukeyHSD(OneWayJB)
TukeyHSD(aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover))
OneWayJB <- aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover)
summary(OneWayJB)
###Number of Vessels and Survey biomass
VesselsBiomass <- subset(Survey_Factors, select=c("No_of_Vessels", "Julian", "DFO_Estimate", "Survey_Area"))
VesselsBiomass <- na.omit(VesselsBiomass)
VesselsBiomass <- subset(VesselsBiomass, Survey_Area == "SB")
VesselsBiomass$No_of_Vessels <- as.factor(VesselsBiomass$No_of_Vessels)
GraphVessels <- ggplot(VesselsBiomass, aes(No_of_Vessels, DFO_Estimate))+ geom_point() + geom_smooth()
print(GraphVessels)
BoxplotVessels <-boxplot(VesselsBiomass$DFO_Estimate~VesselsBiomass$No_of_Vessels, main = "Biomass recorded per number of Vessels in Survey", xlab="Number of Vessels in Survey", ylab="DFO Estimates")
VBANOVA <- aov(DFO_Estimate ~ No_of_Vessels , data = VesselsBiomass)
OneWayVBANOVA <- summary(VBANOVA)
summary(VBANOVA)
###Survey Area, Julian, Survey Time, High Tide Time, DFO_Estimate
SurveyAreaTimeTideBiomass <- subset(Survey_Factors, select=c("Survey_Area","Year", "Julian", "DFO_Estimate", "Survey_Start", "High_Tide", "Tide_Difference", "Tide_Relative" ))
SurveyAreaTimeTideBiomass <- na.omit(SurveyAreaTimeTideBiomass)
ScotsBay_HighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="SB")
###Scot Bay Tide Relative Point Graph
Tide_Relative_Point <- ggplot(ScotsBay_HighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimate)) + geom_point(aes(group= Tide_Difference)) +geom_smooth() + geom_hline(yintercept=mean(ScotsBay_HighTideBiomass$DFO_Estimate))
print(Tide_Relative_Point)
###ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimate ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
HighTide.one.way <- aov(DFO_Estimate ~ High_Tide, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.two.way <- aov(DFO_Estimate ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimate ~ High_Tide, data = ScotsBay_HighTideBiomass)
OneWayHighTide <- summary(HighTide.one.way)
summary(HighTide.one.way)
SurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(SurveyTideDifference.one.way)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-10-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/surveyFactorsAll_Tracey with SSB data.csv"))
date = "2023-11-08"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
library(data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-11-08"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
