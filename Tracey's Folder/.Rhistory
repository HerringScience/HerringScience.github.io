summary(two.way)
VBANOVA <- aov(DFO_Estimates ~ No_of_Vessels , data = VesselsBiomass)
summary(VBANOVA)
#One Way ANOVA - Julian and Turnover
JTANOVA <- aov(DFO_Estimates ~ Julian, data = ScotsBay_Turnover)
summary(JTANOVA)
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
View(Survey_Data)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
TideDifferent.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
TideDifference.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
VBANOVA <- aov(DFO_Estimates ~ No_of_Vessels , data = VesselsBiomass)
summary(VBANOVA)
#One Way ANOVA - Julian and Turnover
JTANOVA <- aov(DFO_Estimates ~ Julian, data = ScotsBay_Turnover)
summary(JTANOVA)
boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
#Set information here
Lat = "44 16 44" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 26 34"
date = "2023-10-03"
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-10-10"
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
TideDifference.one.way <- aov(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
#ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimates ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
HighTide.one.way <- aov(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
summary(SurveyHighTide.two.way)
SurveyTideDifference.two.way <- aov(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.one.way <- aov(DFO_Estimates ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
#boxplot(DFO_Estimates ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimates ~ High_Tide, data = ScotsBay_HighTideBiomass)
summary(TideDifference.one.way)
OneWayHighTide <- summary(HighTide.one.way)
View(one.way)
View(OneWayHighTide)
OneWayHighTide[[1]]
TwoWayHighTide <- summary(SurveyHighTide.two.way)
OneWayTideDifference <- summary(SurveyTideDifference.one.way)
TwoWayTideDifference <- summary(SurveyTideDifference.two.way)
OneWayVBANOVA <- summary(VBANOVA)
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimates"))
View(Survey_Factors)
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimate"))
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Area", "Julian", "DFO_Estimate"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
ScotsBay_Turnover <- subset(JulianAndBiomass, Survey_Area=='SB' )
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimates)) +geom_smooth() + geom_point()
print(Point_Graph)
###Point Graph - Julian and Biomass
Point_Graph <- ggplot(ScotsBay_Turnover, aes(Julian, DFO_Estimate)) +geom_smooth() + geom_point()
print(Point_Graph)
OneWayJB <- aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover)
summary(OneWayJB)
View(OneWayJB)
OneWayJB[["model"]]
OneWayJB
TurkeyHSD(OneWayJB)
?TurkeyHSD
??TurkeyHSD
TukeyHSD(OneWayJB)
str(JulianAndBiomass)
as.factor(JulianAndBiomass$Julian)
str(JulianAndBiomass)
TukeyHSD(OneWayJB)
TukeyHSD(aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover))
OneWayJB <- aov(DFO_Estimate ~ Julian, data = ScotsBay_Turnover)
summary(OneWayJB)
###Number of Vessels and Survey biomass
VesselsBiomass <- subset(Survey_Factors, select=c("No_of_Vessels", "Julian", "DFO_Estimate", "Survey_Area"))
VesselsBiomass <- na.omit(VesselsBiomass)
VesselsBiomass <- subset(VesselsBiomass, Survey_Area == "SB")
VesselsBiomass$No_of_Vessels <- as.factor(VesselsBiomass$No_of_Vessels)
GraphVessels <- ggplot(VesselsBiomass, aes(No_of_Vessels, DFO_Estimate))+ geom_point() + geom_smooth()
print(GraphVessels)
BoxplotVessels <-boxplot(VesselsBiomass$DFO_Estimate~VesselsBiomass$No_of_Vessels, main = "Biomass recorded per number of Vessels in Survey", xlab="Number of Vessels in Survey", ylab="DFO Estimates")
VBANOVA <- aov(DFO_Estimate ~ No_of_Vessels , data = VesselsBiomass)
OneWayVBANOVA <- summary(VBANOVA)
summary(VBANOVA)
###Survey Area, Julian, Survey Time, High Tide Time, DFO_Estimate
SurveyAreaTimeTideBiomass <- subset(Survey_Factors, select=c("Survey_Area","Year", "Julian", "DFO_Estimate", "Survey_Start", "High_Tide", "Tide_Difference", "Tide_Relative" ))
SurveyAreaTimeTideBiomass <- na.omit(SurveyAreaTimeTideBiomass)
ScotsBay_HighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="SB")
###Scot Bay Tide Relative Point Graph
Tide_Relative_Point <- ggplot(ScotsBay_HighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimate)) + geom_point(aes(group= Tide_Difference)) +geom_smooth() + geom_hline(yintercept=mean(ScotsBay_HighTideBiomass$DFO_Estimate))
print(Tide_Relative_Point)
###ANOVAS
SurveyHighTide.two.way <- aov(DFO_Estimate ~ Survey_Start*High_Tide, data = ScotsBay_HighTideBiomass)
HighTide.one.way <- aov(DFO_Estimate ~ High_Tide, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.two.way <- aov(DFO_Estimate ~ Survey_Start*Tide_Difference, data = ScotsBay_HighTideBiomass)
SurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
boxplot(DFO_Estimate ~ High_Tide, data = ScotsBay_HighTideBiomass)
OneWayHighTide <- summary(HighTide.one.way)
summary(HighTide.one.way)
SurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Difference, data = ScotsBay_HighTideBiomass)
summary(SurveyTideDifference.one.way)
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-10-10"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/surveyFactorsAll_Tracey with SSB data.csv"))
date = "2023-11-08"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
library(data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
# remove everything in the workspace
rm(list = ls())
#Set information here
Lat = "44 19 12" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 22 18"
date = "2023-11-08"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
# remove everything in the workspace
rm(list = ls())
library(data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(tibble)
library(zoo)
Sys.setenv(tz = "America/Halifax")
#Set information here
Lat = "43 34 28" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 41"
date = "2023-09-13"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Set information here
Lat = "43 34 28" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 41"
date = "2023-09-27"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2023-10-11"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
date = "2023-10-24"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Set information here
Lat = "45 03 54" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "65 14 93"
date = "2023-09-24"
#Load Sunset Time.csv - Pulls up previous entries.
SunsetStart <- read_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/surveyFactorsAll_Tracey with SSB data.csv"))
#Lat and Lon Converter
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
#Bind Data
SunsetTimeCSV = full_join(SunsetStart, Sunset)
#Save file
SunsetTimeCSV %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/surveyFactorsAll_Tracey with SSB data.csv"))
date = "2023-10-09"
#Calendar date Converter
date = as.Date(as.POSIXct(date))
julian = yday(date)
#Data Table of Sunset times - Current Data
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
Sunset <- as.data.frame(Sunset)
SunsetStart <- as.data.frame(SunsetStart)
Sunset[] <- data.frame(lapply(Sunset, as.character), stringsAsFactors = FALSE)
Sunset$date = as.Date(Sunset$date)
SunsetStartOnly <- Sunset$sunsetStart
SunsetStartOnly <- as.POSIXct(SunsetStartOnly)
###remove everything in environment
rm(list = ls())
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(ggplot2)
library(maps)
library(dplyr)
library(RColorBrewer)
library(AICcmodavg)
library(datasets)
library(multcompView)
###remove everything in environment
rm(list = ls())
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
##Survey Data import and filtering
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
### IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="GB" #SB or GB
surv2="German Bank" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="8"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "N" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Details <- read_csv("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
Survey_Details <- read_csv("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no)
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
Survey_Details <- read_csv("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no)
View(Survey_Data)
### Remove everything in environment
rm(list = ls())
### Set working directory
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
### Set Ground, Survey Number etc
surv="GB" #SB or GB
surv2="German Bank" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="8"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "N" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
View(Survey_Data)
#Importing Data
Date <- Survey_Data %>% slice_tail()
View(Date)
View(Date)
Date <- Date[4]
str(Date)
View(Date)
Survey_Data[slice_tail(), 4]
Date <-as.character(Date)
#Importing Data
Date <- as.character(Survey_Data %>% slice_tail())
#Importing Data
Date <- Survey_Data %>% slice_tail()
Date <- as.character(Date)
Date <- Date[4]
### Remove everything in environment
rm(list = ls())
### Set working directory
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
### Set Ground, Survey Number etc
surv="GB" #SB or GB
surv2="German Bank" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="8"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "N" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
### Set Ground, Survey Number etc
surv="GB" #SB or GB
