#Set for correct timezone. Anything west of UTC is + in R
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
View(Sunset)
#Save file
Sunset %>% write_csv(paste0("C:/Users/", Sys.info()[7], "herri\Desktop\Sunset Time Table.csv"))
#Save file
Sunset %>% write_csv(paste0(C:/Users/herri/Desktop/Sunset Time Table.csv))
Sunset[ , 4]
Sys.time()
Sys.setenv()
?Sys.setenv
Sys.unsetenv(tz)
Sys.unsetenv("tz")
Sys.time()
Sys.setenv("tz = ADT")
Sys.setenv("tz = UTC")
Sys.setenv("tz=UTC")
Sys.setenv(TZ="ADT")
Sys.time()
View(Sunset)
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
View(Sunset)
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
Sys.setenv()
Sys.time()
# remove everything in the workspace
rm(list = ls())
setwd(paste0("C:/ Users/ herri/ Desktop"))
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
View(Sunset)
# remove everything in the workspace
rm(list = ls())
library (data.table)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
View(Sunset)
Sunset[ , 4]
View(Sunset)
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC + 3")
View(Sunset)
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset[ , 4]
library(suncalc)
julian = yday(date)
Sunset Time = Sunset[ , 4]
SunsetTime = Sunset[ , 4]
#Save file
SunsetTime %>% write_csv(paste0("C:\Users\herri\Desktop\Book1.xlsx"))
View(Sunset)
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
View(Sunset)
# remove everything in the workspace
rm(list = ls())
library (data.table)
rm(list = ls())
library (data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
rm(list = ls())
library (data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
m(list = ls())
rm(list = ls())
library (data.table)
library(suncalc)
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library (tibble)
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
View(Sunset)
SunsetTime = Sunset[ , 4]
x = Sys.info()[7]
#Save file
SunsetTime %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
#Save file
SunsetTime %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
SunsetTime = Sunset[ , 4]
#Save file
SunsetTime %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC + 3")
SunsetTime = Sunset[ , 4]
#Save file
SunsetTime %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "ADT")
Sys.getenv()
Sys.getenv()
Sys.time
Sys.time()
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set calendar date here
TZ = "America/Halifax"
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
#Set calendar date here
TZ = "America/Halifax"
date = "2023-08-25"
date = as.Date(date)
?as.Date
#Set calendar date here
date = "2023-08-25"
date = as.Date(date, tz = "ADT")
julian = yday(date)
# remove everything in the workspace
rm(list = ls())
#Set calendar date here
date = "2023-08-25"
date = as.Date(date, tz = "ADT")
julian = yday(date)
year = "2023"
date = as.Date(date, tz = "America/Halifax")
julian = yday(date)
year = "2023"
#Set calendar date here
date = "2023-08-25"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
date = "2023-08-25"
date = as.Date(date, tz = "America/Halifax")
julian = yday(date)
year = "2023"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
View(Sunset)
#Save file
SunsetTime %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
#Save file
Sunset %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
SunsetTime = Sunset[ , 4]
tz = "America/Halifax"
Sys.setenv(tz = "America/Halifax")
Sys.time()
Sys.setenv(tz = "America/Halifax")
#Set lat and long here
Lat = "43 15 90" #Degree-Min-Sec format from the boat but only the numbers written with spaces (e.g. "44 16 23")
Lon = "66 21 96"
Lon = conv_unit(Lon,"deg_min_sec","dec_deg")
Lon = as.numeric(Lon)
Lat = conv_unit(Lat, "deg_min_sec", "dec_deg")
Lat = as.numeric(Lat)
Lon = -1*Lon
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
julian = yday(date)
year = "2023"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
SunsetTime = Sunset[ , 4]
#Set calendar date here
date = "2023-08-25"
date = as.POSIXct(date, tz = "America/Halifax")
julian = yday(date)
year = "2023"
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
date = as.Date(date)
#Set calendar date here
date = "2023-08-25"
date = as.POSIXct(date, tz = "America/Halifax")
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
date = as.Date(date)
date = as.POSIXct(date, tz = "America/Halifax")
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set calendar date here
date = "2023-08-25"
date = as.Date(date)
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = as.POSIXct(date, tz = "America/Halifax"), lat = Lat, lon = Lon, keep = c("sunsetStart"))
?getSunlightTimes
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = "2023-08-25", lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = as.Date("2023-08-25"), lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = as.Date("2023-08-25", tz = "America/Halifax"), lat = Lat, lon = Lon, keep = c("sunsetStart"))
#Set for correct timezone. Anything west of UTC is + in R. Data will show in workspace as UTC. It is not UTC I don't know how to convert it otherwise.
#Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "UTC+3")
Sunset <- suncalc::getSunlightTimes(date = date, lat = Lat, lon = Lon, keep = c("sunsetStart"), tz = "America/Halifax")
View(Sunset)
HalifaxTime = as.Date(SunsetTime, tz = "America/Halifax")
HalifaxTime = as_datetime(SunsetTime, tz = "America/Halifax")
SunsetTime = as_datetime(SunsetTime, tz = "America/Halifax")
#SunsetTime = Sunset[ , 4]
SunsetTime = as_datetime(Sunset[ , 4], tz = "America/Halifax")
#Save file
Sunset %>% write_csv(paste0("C:/Users/", Sys.info()[7],"/Desktop/Sunset Time.csv"))
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
#ANOVA Survey Factors Investigations_Scots Bay Tides
install.packages(weathercan)
install.packages('weathercan')
library(weathercan)
#library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
install.packages('rgeos')
#library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
library(measurements)
library(ggplot2)
library(maps)
library(dplyr)
library(RColorBrewer)
library(AICcmodavg)
library(datasets)
library(multcompView)
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Date", "Survey_Area", "Julian", "DFO_Estimate"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
install.packages('terra')
library(terra)
install.packages('sf')
library(sf)
###remove everything in environment
rm(list = ls())
setwd("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Tracey's Folder")
Survey_Factors <- read_csv("surveyFactorsAll_Tracey with SSB data.csv")
Survey_Data <- read_csv("C:/Users/herri/Documents/GitHub/HerringScience.github.io/Main Data/Survey Data.csv")
JulianAndBiomass <- subset(Survey_Factors, select=c("Survey_Date", "Survey_Area", "Julian", "DFO_Estimate"))
JulianAndBiomass <- na.omit(JulianAndBiomass)
JulianAndBiomass<- subset(JulianAndBiomass, Survey_Date < '2023-05-22') #As only one DFO factor for 2023 is in the system, removed to keep years nice.
GermanBankTurnover <- subset(JulianAndBiomass, Survey_Area=='GB' )
GBPointGraph <- ggplot(GermanBankTurnover, aes(Julian, DFO_Estimate)) +geom_smooth(span = 1) + geom_point()
print(GBPointGraph + labs(y = "Survey Biomass (mt)", x = "Julian Day"))
GBOneWayJB <- aov(DFO_Estimate ~ Julian, data = GermanBankTurnover)
summary(GBOneWayJB)
### German Bank Number of Vessels and Survey Biomass
VesselsBiomass <- subset(Survey_Factors, select=c("Survey_Date", "No_of_Vessels", "Julian", "DFO_Estimate", "Survey_Area"))
VesselsBiomass <- na.omit(VesselsBiomass)
GBVesselsBiomass <- subset(VesselsBiomass, Survey_Area == "GB", Survey_Date < '2023-05-22')
GBVesselsBiomass$No_of_Vessels <- as.factor(GBVesselsBiomass$No_of_Vessels)
GBBoxplotVessels <-boxplot(GBVesselsBiomass$DFO_Estimate~GBVesselsBiomass$No_of_Vessels, xlab="Number of Vessels in Survey", ylab="Survey Biomass (mt)")
GBOneWayVessels <- aov(DFO_Estimate ~ No_of_Vessels, data = GBVesselsBiomass)
summary(GBOneWayVessels)
###German Bank Survey Area, Julian, Survey Time, High Tide Time, DFO_Estimate
SurveyAreaTimeTideBiomass <- subset(Survey_Factors, select=c("Survey_Date", "No_of_Vessels", "Survey_Area","Year", "Julian", "DFO_Estimate", "Survey_Start", "High_Tide", "Tide_Difference", "Tide_Relative" ))
SurveyAreaTimeTideBiomass <- na.omit(SurveyAreaTimeTideBiomass)
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
GermanBankHighTideBiomass$Tide_Relative <- as.numeric(GermanBankHighTideBiomass$Tide_Relative)
GBTideRelativePoint <- ggplot(GermanBankHighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimate)) + geom_point(aes(group= Tide_Relative)) +geom_smooth(span=1) + geom_hline(yintercept=mean(GermanBankHighTideBiomass$DFO_Estimate))
print(GBTideRelativePoint + labs(y="Survey Biomass", x = "Tide Relative to Survey Start (hrs)"))
GBSurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Relative, data = GermanBankHighTideBiomass)
summary(GBSurveyTideDifference.one.way)
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, DFO_Estimate < '14000')
View(GermanBankHighTideBiomass)
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate < '14000')
###German Bank Survey Area, Julian, Survey Time, High Tide Time, DFO_Estimate
SurveyAreaTimeTideBiomass <- subset(Survey_Factors, select=c("Survey_Date", "No_of_Vessels", "Survey_Area","Year", "Julian", "DFO_Estimate", "Survey_Start", "High_Tide", "Tide_Difference", "Tide_Relative" ))
SurveyAreaTimeTideBiomass <- na.omit(SurveyAreaTimeTideBiomass)
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
View(GermanBankHighTideBiomass1)
View(GermanBankHighTideBiomass)
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22', DFO_Estimate < '140000')
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate < '140000')
View(GermanBankHighTideBiomass1)
View(GermanBankHighTideBiomass)
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate < '143937')
View(GermanBankHighTideBiomass1)
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate < "143937")
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937")
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22',  DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937")
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22',  DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937")
GermanBankHighTideBiomass$Tide_Relative <- as.numeric(GermanBankHighTideBiomass$Tide_Relative)
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
GermanBankHighTideBiomass1 <- subset(GermanBankHighTideBiomass, DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937")
View(GermanBankHighTideBiomass)
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937")
GermanBankHighTideBiomass$Tide_Relative <- as.numeric(GermanBankHighTideBiomass$Tide_Relative)
GBTideRelativePoint <- ggplot(GermanBankHighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimate)) + geom_point(aes(group= Tide_Relative)) +geom_smooth(span=1) + geom_hline(yintercept=mean(GermanBankHighTideBiomass$DFO_Estimate))
print(GBTideRelativePoint + labs(y="Survey Biomass", x = "Tide Relative to Survey Start (hrs)"))
GBSurveyTideDifference.one.way <- aov(DFO_Estimate ~ Tide_Relative, data = GermanBankHighTideBiomass)
summary(GBSurveyTideDifference.one.way)
GermanBankHighTideBiomass <- subset(SurveyAreaTimeTideBiomass, Survey_Area=="GB")
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, Survey_Date < '2023-05-22')
GermanBankHighTideBiomass <- subset(GermanBankHighTideBiomass, DFO_Estimate!="228870" & DFO_Estimate!="191802" & DFO_Estimate!="143937") #removed top 3 values to see if this made a difference to the ANOVA
GermanBankHighTideBiomass$Tide_Relative <- as.numeric(GermanBankHighTideBiomass$Tide_Relative)
GBTideRelativePoint <- ggplot(GermanBankHighTideBiomass, aes(x=Tide_Relative, y=DFO_Estimate)) + geom_point(aes(group= Tide_Relative)) +geom_smooth(span=5) + geom_hline(yintercept=mean(GermanBankHighTideBiomass$DFO_Estimate))
print(GBTideRelativePoint + labs(y="Survey Biomass", x = "Tide Relative to Survey Start (hrs)"))
