mutate(Vessel = replace(Vessel, Vessel == "V7", V7)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V8", V8)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V9", V9)) %>%
mutate(Vessel = replace(Vessel, Vessel == "NVessel", NVessel)) %>%
mutate(Vessel = replace(Vessel, Vessel == "EVessel", EVessel))
#Short-hand names and save for Update Data script usage
Plan2 = Plan %>%
mutate(Vessel = replace(Vessel, Vessel == "Leroy and Barry", "LB")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Morning Star", "MS")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Canada 100", "C1")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Fundy Monarch", "FM")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Brunswick Provider", "BP")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Lady Melissa", "LM")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Sealife II" | Vessel == "Sealife", "SL")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Lady Janice" | Vessel == "Lady Janice II", "LJ")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Tasha Marie", "TM"))
write_csv(x=Plan2, file=paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/survey plan.csv"))
#Land Data
setwd(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/"))
can<-getData('GADM', country="CAN", level=1)
us = getData('GADM', country = "USA", level = 1)
can1 = rbind(can,us)
NBNS <- can1[can1@data$NAME_1%in%c("New Brunswick","Nova Scotia","Prince Edward Island","Newfoundland and Labrador","Québec", "Maine"),]
# Proper coordinates for German Bank
GBMap <- as(extent(-66.5, -65.5, 43, 44), "SpatialPolygons")
proj4string(GBMap) <- CRS(proj4string(NBNS))
GBout <- gIntersection(NBNS, GBMap, byid=TRUE)
# Proper coordinates for Scots Bay
SBMap <- as(extent(-65.5, -64.5, 45, 45.5), "SpatialPolygons")
proj4string(SBMap) <- CRS(proj4string(NBNS))
SBout <- gIntersection(NBNS, SBMap, byid=TRUE)
#Make CTD Cast Box (GB or SB)
a = c("4334.320", "4333.600", "4333.600", "4334.320")
b = c("6622.080", "6622.080", "6621.000", "6621.000")
c = c("4503.432", "4503.000", "4503.000", "4503.432")
d = c("6513.048", "6513.048", "6512.000", "6512.000")
if(surv == "SB") {
CTDBox = data.frame(c,d)
names(CTDBox) = c('Lat', 'Lon')
}
if(surv == "GB") {
CTDBox = data.frame(a,b)
names(CTDBox) = c('Lat', 'Lon')
}
#Make Tow Box (SB only)
a = c("4501.800", "4504.200", "4506.780", "4504.500")
b = c("6515.300", "6506.600", "6506.600", "6515.300")
TowBox = data.frame(a,b)
names(TowBox) = c('Lat', 'Lon')
#Import All Boxes
setwd(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Box Coordinates/"))
boxes = read.csv("surveyBoxes.csv")
# Scots Bay plankton and CTD box
SBplankton=boxes[which(boxes$Box == "SBPlanktonBox"), ]
SBCTD=boxes[which(boxes$Box == "SBocean"), ]
# Scots Bay
SUA = read.csv("polygon_SBEastern.csv")
polyEastern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SBNorthern.csv")
polyNorthern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SB.csv")
polySB_main = as.PolySet(SUA, projection="LL")
#German Bank CTD box
GBCTD=boxes[which(boxes$Box == "GBocean"), ]
# German Bank
SUA = read.csv("polygon_GB.csv")
polyGB = as.PolySet(SUA, projection="LL")
# Seal Island
SUA = read.csv("polygon_SI.csv")
polySI = as.PolySet(SUA, projection="LL")
Plan$`Start Lat` = conv_unit(Plan$`Start Lat`, "dec_deg", "deg_dec_min")
Plan$`Start Lon` = conv_unit(Plan$`Start Lon`, "dec_deg", "deg_dec_min")
Plan$`End Lat` = conv_unit(Plan$`End Lat`, "dec_deg", "deg_dec_min")
Plan$`End Lon` = conv_unit(Plan$`End Lon`, "dec_deg", "deg_dec_min")
Plan$`Start Lat` = mutate(Plan$`Start Lat` = gsub(" ", ""))
Plan = Plan %>% mutate('Start Lat' = gsub(" ", "", 'Start Lat'))
View(Plan)
## Global options
rm(list = ls())
#Change these options
surv = "SB"
surv2 = "Scots Bay"
surv.date = "2023-08-14 20:30"
surv.no = "7"
Allocation = "100" #set to "0" for a non-fishing survey
SIAllocation = "75" #Seal Island allocation for GB-only
Tagging = "Morning Star, Sealife II, Lady Janice, Fundy Monarch, Tasha Marie, and Lady Melissa" #list vessel names in a single quote string (e.g. "Lady Melissa and Sealife II")
#Set vessels below
vessels = 9
EVessel = "Brunswick Provider" #Set NA for GB
NVessel = "Fundy Monarch" #Set NA for GB
PlanktonVessel = "Lady Janice"
#Main box only
V1 = "Morning Star"
V2 = PlanktonVessel
V3 = "Leroy and Barry"
V4 = "Sealife II"
V5 = "Lady Melissa"
V6 = "Canada 100"
V7 = "Tasha Marie"
V8 = NA
V9 = NA
knitr::opts_knit$set(root.dir = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/"))
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, fig.align='center')
#Import all packages and data
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(measurements)
#Parse date time
surv.date = as.POSIXlt(surv.date, format="%Y-%m-%d %H:%M")
StartTime = substr(surv.date, 12,16)
StartDate = substr(surv.date, 1,10)
year = substr(surv.date, 1,4)
#Create Plan by combining main box with any extra boxes
vessels2 = ifelse(is.na(EVessel) & is.na(NVessel), vessels,
ifelse(!is.na(EVessel) & is.na(NVessel), vessels-1,
ifelse(!is.na(EVessel) & !is.na(NVessel), vessels-2,
NA)))
Main = read_csv(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Surveys/Survey Lines/", surv, "/V", vessels2, ".csv"))
if(!is.na(NVessel)){North = read_csv(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Surveys/Survey Lines/", surv, "/North_Box.csv"))}
if(!is.na(EVessel)){East = read_csv(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Surveys/Survey Lines/", surv, "/East_Box.csv"))}
if(!is.na(NVessel) & is.na(EVessel)){Plan = full_join(Main, North)}
if(is.na(NVessel) & !is.na(EVessel)){Plan = full_join(Main, East)}
if(!is.na(NVessel) & !is.na(EVessel)){
Plan = full_join(Main, North)
Plan = full_join(Plan, East)}
#Add vessel names to Plan
Plan = Plan %>%
mutate(Vessel = replace(Vessel, Vessel == "V1", V1)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V2", V2)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V3", V3)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V4", V4)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V5", V5)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V6", V6)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V7", V7)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V8", V8)) %>%
mutate(Vessel = replace(Vessel, Vessel == "V9", V9)) %>%
mutate(Vessel = replace(Vessel, Vessel == "NVessel", NVessel)) %>%
mutate(Vessel = replace(Vessel, Vessel == "EVessel", EVessel))
#Short-hand names and save for Update Data script usage
Plan2 = Plan %>%
mutate(Vessel = replace(Vessel, Vessel == "Leroy and Barry", "LB")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Morning Star", "MS")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Canada 100", "C1")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Fundy Monarch", "FM")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Brunswick Provider", "BP")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Lady Melissa", "LM")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Sealife II" | Vessel == "Sealife", "SL")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Lady Janice" | Vessel == "Lady Janice II", "LJ")) %>%
mutate(Vessel = replace(Vessel, Vessel == "Tasha Marie", "TM"))
write_csv(x=Plan2, file=paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/survey plan.csv"))
#Land Data
setwd(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/"))
can<-getData('GADM', country="CAN", level=1)
us = getData('GADM', country = "USA", level = 1)
can1 = rbind(can,us)
NBNS <- can1[can1@data$NAME_1%in%c("New Brunswick","Nova Scotia","Prince Edward Island","Newfoundland and Labrador","Québec", "Maine"),]
# Proper coordinates for German Bank
GBMap <- as(extent(-66.5, -65.5, 43, 44), "SpatialPolygons")
proj4string(GBMap) <- CRS(proj4string(NBNS))
GBout <- gIntersection(NBNS, GBMap, byid=TRUE)
# Proper coordinates for Scots Bay
SBMap <- as(extent(-65.5, -64.5, 45, 45.5), "SpatialPolygons")
proj4string(SBMap) <- CRS(proj4string(NBNS))
SBout <- gIntersection(NBNS, SBMap, byid=TRUE)
#Make CTD Cast Box (GB or SB)
a = c("4334.320", "4333.600", "4333.600", "4334.320")
b = c("6622.080", "6622.080", "6621.000", "6621.000")
c = c("4503.432", "4503.000", "4503.000", "4503.432")
d = c("6513.048", "6513.048", "6512.000", "6512.000")
if(surv == "SB") {
CTDBox = data.frame(c,d)
names(CTDBox) = c('Lat', 'Lon')
}
if(surv == "GB") {
CTDBox = data.frame(a,b)
names(CTDBox) = c('Lat', 'Lon')
}
#Make Tow Box (SB only)
a = c("4501.800", "4504.200", "4506.780", "4504.500")
b = c("6515.300", "6506.600", "6506.600", "6515.300")
TowBox = data.frame(a,b)
names(TowBox) = c('Lat', 'Lon')
#Import All Boxes
setwd(paste0("C:/Users/", Sys.info()[7], "/Documents/GitHub/HerringScience.github.io/Box Coordinates/"))
boxes = read.csv("surveyBoxes.csv")
# Scots Bay plankton and CTD box
SBplankton=boxes[which(boxes$Box == "SBPlanktonBox"), ]
SBCTD=boxes[which(boxes$Box == "SBocean"), ]
# Scots Bay
SUA = read.csv("polygon_SBEastern.csv")
polyEastern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SBNorthern.csv")
polyNorthern = as.PolySet(SUA, projection="LL")
SUA = read.csv("polygon_SB.csv")
polySB_main = as.PolySet(SUA, projection="LL")
#German Bank CTD box
GBCTD=boxes[which(boxes$Box == "GBocean"), ]
# German Bank
SUA = read.csv("polygon_GB.csv")
polyGB = as.PolySet(SUA, projection="LL")
# Seal Island
SUA = read.csv("polygon_SI.csv")
polySI = as.PolySet(SUA, projection="LL")
Plan$`Start Lat` = conv_unit(Plan$`Start Lat`, "dec_deg", "deg_dec_min")
Plan$`Start Lon` = conv_unit(Plan$`Start Lon`, "dec_deg", "deg_dec_min")
Plan$`End Lat` = conv_unit(Plan$`End Lat`, "dec_deg", "deg_dec_min")
Plan$`End Lon` = conv_unit(Plan$`End Lon`, "dec_deg", "deg_dec_min")
Plan3 = Plan
Plan = Plan %>% mutate(Plan$'Start Lat' = gsub(" ", "", Plan$'Start Lat'))
?gsub
Plan$`Start Lat` = gsub(" ", "", Plan$`Start Lat`)
Plan = Plan3
View(Plan)
Plan = Plan %>%
mutate(Start_deg = substr('Start Lat', 1, 2))
Plan = Plan %>%
mutate(Start_deg = substr(Plan$'Start Lat', 1, 2))
Plan = Plan3
View(Plan)
?conv_unit
Plan = Plan %>%
mutate('Start Lat' = str_trunc('Start Lat', 7, "right"))
View(Plan)
Plan= Plan3
Plan = Plan %>%
mutate('Start Lat' = str_trunc(Plan$`Start Lat`, 7, "right"))
View(Plan)
Plan= Plan3
Plan = Plan %>%
mutate('Start Lat' = substr(Plan$`Start Lat`, 1, 10))
Plan = Plan3
Plan = Plan %>%
mutate('Start Lat' = substr(Plan$`Start Lat`, 1, 10)) %>%
mutate('End Lat' = substr(Plan$`End Lat`, 1, 10)) %>%
mutate('Start Lon' = substr(Plan$`Start Lon`, 1, 10)) %>%
mutate('End Lon' = substr(Plan$`End Lon`, 1, 10))
Plan = Plan3
Plan = Plan %>%
mutate('Start Lat' = substr(Plan$`Start Lat`, 1, 8)) %>%
mutate('End Lat' = substr(Plan$`End Lat`, 1, 8)) %>%
mutate('Start Lon' = substr(Plan$`Start Lon`, 1, 10)) %>%
mutate('End Lon' = substr(Plan$`End Lon`, 1, 10))
test = str_split_i(Plan$`Start Lat`, " ")
?str_split_i
test = str_split_i(Plan$`Start Lat`, " ", 2)
test2 = str_split_i(Plan$`Start Lat`, " ", -2)
test = paste(rep(0, n), test, sep = "")
test = sapply(0, paste0,test)
View(test)
test = str_split_i(Plan$`Start Lat`, " ", 2)
test3 = str_split_i(test, ".", 3)
test3 = str_split_i(test, ".", 2)
test3 = str_split_i(test, ".", 1)
test3 = str_split_i(test, ".", -1)
test3 = str_split_i(test, "\\.", -1)
decimal = str_split_i(end, "\\.", 1)
end = str_split_i(Plan$`Start Lat`, " ", 2)
minutes = str_split_i(end, "\\.", -1)
decimal = str_split_i(end, "\\.", 1)
decimal
if(length(decimal) == 1){
decimal = sapply(0, paste0, decimal)
}
decimal = decimal %>%
mutate(ifelse(nchar() == 1, sapply(0,paste0, decimal), NA))
decimal = sprintf("%02d", decimal)
?sprintf
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
decimal
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes
minutes = sprintf("d%03", minutes)
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
degree = str_split_i(Plan$`Start Lat`, " ", -2)
end = str_split_i(Plan$`Start Lat`, " ", 2)
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
all
Plan$`Start Lat` = all
View(Plan)
degree = str_split_i(Plan$`End Lat`, " ", -2)
end = str_split_i(Plan$`End Lat`, " ", 2)
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
Plan$`End Lat` = all
View(Plan)
degree = str_split_i(Plan$`Start Lon`, " ", -2)
degree = str_split_i(Plan$`Start Lon`, " ", -2)
end = str_split_i(Plan$`Start Lon`, " ", 2)
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
Plan$`Start Lon` = all
View(Plan)
degree = str_split_i(Plan$`End Lon`, " ", -2)
end = str_split_i(Plan$`End Lon`, " ", 2)
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
Plan$`End Lon` = all
View(Plan)
Plan = Plan3
View(Plan)
Plan$`Start Lat` = conv_unit(Plan$`Start Lat`, "dec_deg", "deg_dec_min")
Plan$`Start Lon` = conv_unit(Plan$`Start Lon`, "dec_deg", "deg_dec_min")
Plan$`End Lat` = conv_unit(Plan$`End Lat`, "dec_deg", "deg_dec_min")
Plan$`End Lon` = conv_unit(Plan$`End Lon`, "dec_deg", "deg_dec_min")
Plan = Plan %>%
mutate('Start Lat' = substr(Plan$`Start Lat`, 1, 8)) %>%
mutate('End Lat' = substr(Plan$`End Lat`, 1, 8)) %>%
mutate('Start Lon' = substr(Plan$`Start Lon`, 1, 10)) %>%
mutate('End Lon' = substr(Plan$`End Lon`, 1, 10))
Plan = Plan3
Plan = Plan %>%
mutate('Start Lat' = substr(Plan$`Start Lat`, 1, 8)) %>%
mutate('End Lat' = substr(Plan$`End Lat`, 1, 8)) %>%
mutate('Start Lon' = substr(Plan$`Start Lon`, 1, 10)) %>%
mutate('End Lon' = substr(Plan$`End Lon`, 1, 10))
degree = str_split_i(Plan$`End Lat`, " ", -2)
end = str_split_i(Plan$`End Lat`, " ", 2)
end
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes
minutes = as.numeric(str_split_i(end, "\\.", -3))
minutes
minutes = as.numeric(str_split_i(end, "\\.", -2))
minutes
end
minutes = as.numeric(str_split_i(end, "\\.", 2))
minutes
decimal = as.numeric(str_split_i(end, "\\.", 1))
minutes = as.numeric(str_split_i(end, "\\.", 3))
minutes
minutes = as.numeric(str_split_i(end, "\\.", 2))
minutes = str_pad(minutes, width=3, side="right", pad="0")
minutes
?str_split_i
degree = str_split_i(Plan$`End Lat`, " ", -2)
end = str_split_i(Plan$`End Lat`, " ", 2)
decimal = as.numeric(str_split_i(end, "\\.", 1))
decimal = sprintf("%02d", decimal)
minutes = as.numeric(str_split_i(end, "\\.", 2))
minutes = str_pad(minutes, width=3, side="right", pad="0")
all = paste0(degree,decimal,".",minutes)
Plan$`End Lat` = all
minutes = as.numeric(str_split_i(end, "\\.", -2))
minutes = as.numeric(str_split_i(end, "\\.", -1))
minutes
minutes = sprintf("%02d", minutes)
minutes
minutes = str_pad(minutes, width=3, side="right", pad="0")
minutes
View(Plan)
# remove everything in the workspace
rm(list = ls())
# IMPORTANT : SET GROUND, YEAR, AND SURVEY # HERE
surv="GB" #SB or GB
surv2="German Bank" #"German Bank" or "Scots Bay" as written
year="2023"
surv.no="1"
adhoc = "FALSE" #true or false if an adhoc survey was completed (and "adhoc.csv" exists)
Sample = "N" #whether ("Y") or not ("N") they caught fish during this survey window
Tow = "Y" #whether or not plankton tow(s) were conducted
#(SB ONLY) Set main-box vessels
ids = c("FM", "LB", "LJ", "SL")
#Area and TS values
SB1= 661 #SB main area
SB2= 77 #SB north area
SB3= 115 #SB east area
GB1 = 805 #GB main area
GB2 = 267 #Seal Island area
GB3 = NA #Ad-hoc school survey area
##
###
##
#BELOW VALUES SHOULD RARELY CHANGE#
TS1 = -35.5 #TS38
#turnover calculation regression values
GB_y = 0.199392662629964
GB_x_var = 0.528381832773883
GB_days = 31
SB_y = 0.364102758434224
SB_x_var = 0.436969270679439
SB_days = 29
library(rlang)
library(cli)
library(lubridate)
library(reprex)
library(tidyverse)
library(geosphere)
library(reshape2)
library(moderndive)
library(skimr)
library(ggridges)
library(weathercan)
library(GGally)
library(psych)
library(raster)
library(PBSmapping)
library(rgeos)
library(knitr)
library(kableExtra)
library(grid)
library(gridExtra)
library(cowplot)
library(readxl)
library(hms)
##Survey Data import and filtering
setwd(paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no))
Plankton = read_csv("PlanktonData.csv")
Plankton = Plankton %>%
mutate(Year = year,
Ground = surv,
Survey.No = surv.no,
TowTime = difftime(Time2, Time1, units = "mins"))
Plankton$Year = as.numeric(Plankton$Year)
Plankton$Swell = as.character(Plankton$Swell)
if(Sample == "Y"){Plankton$Sample = "Y"}
if(Sample == "N"){Plankton$Sample = "N"}
#get CTD data from Plankton
if(!is.na(first(Plankton$CTD_ID))){
CTDData = read_csv(paste0(Plankton$CTD_ID, ".csv"))
CTDData = CTDData %>%
dplyr::select(Pressure = "Pressure (Decibar)", Depth = "Depth (Meter)", Temperature = "Temperature (Celsius)",	Conductivity = "Conductivity (MicroSiemens per Centimeter)", Specific_conductance = "Specific conductance (MicroSiemens per Centimeter)",
Salinity = "Salinity (Practical Salinity Scale)", Sound_velocity = "Sound velocity (Meters per Second)", Density = "Density (Kilograms per Cubic Meter)")
CTDData = CTDData %>%
mutate(plankton_ID = paste0(first(Plankton$Set_Number), "/", last(Plankton$Set_Number)),
ground = surv2,
id = Plankton$CTD_ID,
Date = StartDate,
Lat = Plankton$CTD_Lat,
Lon = Plankton$CTD_Lon,
Year = year,
Survey = surv.no)
CTDRaw = read_csv("CTD_Raw.csv")
CTDTotal = full_join(CTDRaw, CTDData)
CTDTotal %>% write_csv("CTD_Raw.csv")
Plankton = Plankton %>%
mutate(AvgTemp = mean(CTDData$Temperature),
AvgSalinity = mean(CTDData$Salinity))
}
if(is.na(first(Plankton$CTD_ID))){
Plankton = Plankton %>%
mutate(AvgTemp = NA,
AvgSalinity = NA)
}
#get Ruskin data
if(Tow == "Y"){
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), sheet = 'Data')
TowData$DateTime = TowData$Time
TowData$Date = substr(TowData$DateTime,1,10)
TowData$Date = as.Date(TowData$Date)
TowData$Time = substr(TowData$DateTime,12,19)
TowData$Time = hms::as_hms(TowData$Time)
}
View(TowData)
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), sheet = 'Data')
View(TowData)
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), sheet = 'Data')
View(TowData)
TowData = TowData[-1,]
View(TowData)
TowData = select(Time = Data, Pressure = '...2', 'Sea pressure' = '...3', Depth = '...4')
TowData = dplyr::select(Time = Data, Pressure = '...2', 'Sea pressure' = '...3', Depth = '...4')
TowData = TowData %>% dplyr::select(Time = Data, Pressure = '...2', 'Sea pressure' = '...3', Depth = '...4')
View(TowData)
TowData$DateTime = TowData$Time
TowData$Date = substr(TowData$DateTime,1,10)
TowData$Date = as.Date(TowData$Date)
TowData$Time = substr(TowData$DateTime,12,19)
View(TowData)
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), sheet = 'Data')
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), sheet = 'Data')
?read_excel
TowData = read_excel(path = paste0("C:/Users/", Sys.info()[7],"/Documents/GitHub/HerringScience.github.io/Surveys/", year, "/", surv, surv.no, "/Ruskin.xlsx"), skip = 1, sheet = 'Data')
TowData$DateTime = TowData$Time
TowData$Date = substr(TowData$DateTime,1,10)
TowData$Time = substr(TowData$DateTime,12,19)
TowData$Time = hms::as_hms(TowData$Time)
